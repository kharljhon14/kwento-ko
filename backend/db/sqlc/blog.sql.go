// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blog.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs(
    title,
    content,
    author
) VALUES (
    $1, $2, $3
) RETURNING id, author, title, content, created_at, version
`

type CreateBlogParams struct {
	Title   string      `json:"title"`
	Content string      `json:"content"`
	Author  pgtype.UUID `json:"author"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog, arg.Title, arg.Content, arg.Author)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blogs
WHERE id = $1 AND author = $2
`

type DeleteBlogParams struct {
	ID     pgtype.UUID `json:"id"`
	Author pgtype.UUID `json:"author"`
}

func (q *Queries) DeleteBlog(ctx context.Context, arg DeleteBlogParams) error {
	_, err := q.db.Exec(ctx, deleteBlog, arg.ID, arg.Author)
	return err
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT 
b.id, 
b.title, 
b.content,
b.created_at, 
b.version, 
u.name, 
u.id AS author_id
FROM blogs b
INNER JOIN users u
ON u.id = b.author
WHERE b.id = $1
`

type GetBlogByIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Version   int32              `json:"version"`
	Name      string             `json:"name"`
	AuthorID  pgtype.UUID        `json:"author_id"`
}

func (q *Queries) GetBlogByID(ctx context.Context, id pgtype.UUID) (GetBlogByIDRow, error) {
	row := q.db.QueryRow(ctx, getBlogByID, id)
	var i GetBlogByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Version,
		&i.Name,
		&i.AuthorID,
	)
	return i, err
}

const getBlogCount = `-- name: GetBlogCount :one
SELECT COUNT(*) FROM blogs
`

func (q *Queries) GetBlogCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getBlogCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBlogs = `-- name: GetBlogs :many
SELECT 
b.id, 
b.title, 
b.content,
b.created_at, 
b.version, 
u.name, 
u.id AS author_id
FROM blogs b
INNER JOIN users u
ON u.id = b.author
ORDER BY created_at DESC, b.id ASC
LIMIT $1 OFFSET $2
`

type GetBlogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetBlogsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Version   int32              `json:"version"`
	Name      string             `json:"name"`
	AuthorID  pgtype.UUID        `json:"author_id"`
}

func (q *Queries) GetBlogs(ctx context.Context, arg GetBlogsParams) ([]GetBlogsRow, error) {
	rows, err := q.db.Query(ctx, getBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBlogsRow{}
	for rows.Next() {
		var i GetBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Version,
			&i.Name,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :one
UPDATE blogs
SET title = $1,
    content = $2,
    version = version + 1
WHERE id = $3
RETURNING id, author, title, content, created_at, version
`

type UpdateBlogParams struct {
	Title   string      `json:"title"`
	Content string      `json:"content"`
	ID      pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlog, arg.Title, arg.Content, arg.ID)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}
