// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blog_tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBlogTags = `-- name: AddBlogTags :exec
INSERT INTO blog_tags (blog_id, tag_id)
SELECT $1, unnest($2::uuid[])
`

type AddBlogTagsParams struct {
	BlogID  pgtype.UUID   `json:"blog_id"`
	Column2 []pgtype.UUID `json:"column_2"`
}

func (q *Queries) AddBlogTags(ctx context.Context, arg AddBlogTagsParams) error {
	_, err := q.db.Exec(ctx, addBlogTags, arg.BlogID, arg.Column2)
	return err
}

const getBlogTags = `-- name: GetBlogTags :many
SELECT  t.name
FROM blog_tags b
INNER JOIN tags t 
ON t.id = b.tag_id
WHERE b.blog_id = $1
`

func (q *Queries) GetBlogTags(ctx context.Context, blogID pgtype.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getBlogTags, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBlogTags = `-- name: RemoveBlogTags :exec
DELETE FROM blog_tags
WHERE blog_id = $1
`

func (q *Queries) RemoveBlogTags(ctx context.Context, blogID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeBlogTags, blogID)
	return err
}
