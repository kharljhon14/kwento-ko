// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags(
    name
) VALUES( 
    $1
) RETURNING id, name, created_at, version
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name, created_at, version FROM tags
WHERE id = $1
`

func (q *Queries) GetTag(ctx context.Context, id pgtype.UUID) (Tag, error) {
	row := q.db.QueryRow(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const getTags = `-- name: GetTags :many
SELECT id, name, created_at, version FROM tags
ORDER BY created_at DESC, id ASC
LIMIT $1 OFFSET $2
`

type GetTagsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTags(ctx context.Context, arg GetTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsCount = `-- name: GetTagsCount :one
SELECT COUNT(*) FROM tags
`

func (q *Queries) GetTagsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTagsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET name = $1
WHERE id = $2
RETURNING id, name, created_at, version
`

type UpdateTagParams struct {
	Name string      `json:"name"`
	ID   pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag, arg.Name, arg.ID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}
