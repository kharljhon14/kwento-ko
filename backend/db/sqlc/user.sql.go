// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT into users(
    google_id,
    name,
    email,
    profile_image
) VALUES (
 $1, $2, $3, $4
) RETURNING id
`

type CreateUserParams struct {
	GoogleID     string      `json:"google_id"`
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GoogleID,
		arg.Name,
		arg.Email,
		arg.ProfileImage,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, google_id, email, name, profile_image FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.ProfileImage,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1
WHERE email = $2
RETURNING name
`

type UpdateUserParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Name, arg.Email)
	var name string
	err := row.Scan(&name)
	return name, err
}
